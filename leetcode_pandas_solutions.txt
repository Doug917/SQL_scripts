#176.

import pandas as pd

def second_highest_salary(employee: pd.DataFrame) -> pd.DataFrame:

    salaries = employee.drop_duplicates(subset="salary")
    salaries.sort_values(by=['salary'],inplace=True,ascending=False)
    col_title = "SecondHighestSalary"
    try:
        salaries = salaries.rename(columns={"salary":col_title})
        return salaries[[col_title]].iloc[[1]]
    except:
        return pd.DataFrame({col_title:None},index=[0])

#177.

import pandas as pd

def nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:

    salaries = employee.drop_duplicates(subset="salary")
    salaries.sort_values(by=['salary'],inplace=True,ascending=False)
    col_title = "getNthHighestSalary" + "(" + str(N) + ")"
    try:
        salaries = salaries.rename(columns={"salary":col_title})
        return salaries[[col_title]].iloc[[N-1]]
    except:
        return pd.DataFrame({col_title:None},index=[0])

#183.

import pandas as pd

def find_customers(customers: pd.DataFrame, orders: pd.DataFrame) -> pd.DataFrame:

    #Rename 'name' field in customers table to 'Customers'.
    customers.rename(columns={'name':'Customers'}, inplace=True)
    test_list = list(orders['customerId'])
    return customers.loc[~customers['id'].isin(test_list),['Customers']]

#595.

import pandas as pd

def big_countries(world: pd.DataFrame) -> pd.DataFrame:
    return world[["name","population","area"]][(world["area"]>=3000000) | (world["population"]>=25000000)]

#596.

import pandas as pd

def find_classes(courses: pd.DataFrame) -> pd.DataFrame:

    class_dict = {}
    classes = courses['class']
    for row in classes:
        if row not in class_dict:
            class_dict[row] = 1
        else:
            class_dict[row]+=1
    
    return pd.DataFrame({'class':[key for key in class_dict.keys() if class_dict[key]>=5]})

#1173.

import pandas as pd

def food_delivery(delivery: pd.DataFrame) -> pd.DataFrame:

    total_orders = len(delivery['delivery_id'])
    immediate_orders = len(delivery.loc[delivery['order_date']==delivery['customer_pref_delivery_date'],['delivery_id']])
    percentage = 100*round(immediate_orders/total_orders,4)
    return pd.DataFrame({'immediate_percentage':percentage}, index=[0])
    

#1148.

import pandas as pd

def article_views(views: pd.DataFrame) -> pd.DataFrame:
    
    result_total = views.loc[views["author_id"]==views["viewer_id"],["author_id"]]
    result_total = result_total.rename(columns={"author_id":"id"})
    result_total = result_total.sort_values(by=["id"])
    return result_total.drop_duplicates()

#1667.

import pandas as pd

def fix_names(users: pd.DataFrame) -> pd.DataFrame:
    
    n = len(users.index)
    for i in range(n):
        name_ = users.loc[i,"name"]
        name_ = name_[0].upper()+name_[1::].lower()
        users["name"][i] = name_

    return users.sort_values(by=["user_id"])


#1683.

import pandas as pd

def invalid_tweets(tweets: pd.DataFrame) -> pd.DataFrame:

    n = len(tweets.index)
    test_vals = [len(tweets.loc[i,"content"]) for i in range(n)]
    tweets["content_length"] = test_vals
    return tweets.loc[tweets["content_length"]>15,["tweet_id"]]

#1741.

import pandas as pd

def total_time(employees: pd.DataFrame) -> pd.DataFrame:

    E = employees.copy()
    E['total_time'] = employees['out_time']-employees['in_time']
    Eprime = E.groupby(['event_day','emp_id'],as_index=False).aggregate('sum')
    Eprime = Eprime.rename(columns={"event_day":"day"})
    Eprime = Eprime.drop(['in_time','out_time'],axis=1)

    return Eprime

#1757.

import pandas as pd

def find_products(products: pd.DataFrame) -> pd.DataFrame:
    return products[["product_id"]][(products["low_fats"]=='Y') & (products["recyclable"]=='Y')]

#1907.

import pandas as pd

def count_salary_categories(accounts: pd.DataFrame) -> pd.DataFrame:

    Low = len(accounts.loc[accounts['income']<20000,['income']])
    Average = len(accounts.loc[(accounts['income']>=20000) & (accounts['income']<=50000),['income']])
    High = len(accounts.loc[accounts['income']>50000,['income']])
    return pd.DataFrame({'category':['Low Salary','Average Salary','High Salary'],'accounts_count':[Low,Average,High]})

#2082.

import pandas as pd

def count_rich_customers(store: pd.DataFrame) -> pd.DataFrame:

    query = store.loc[store["amount"]>500,["customer_id"]].drop_duplicates(subset="customer_id")
    output = pd.DataFrame({"rich_count": len(query.index)},index=[0])

    return output

#2356.

import pandas as pd

def count_unique_subjects(teacher: pd.DataFrame) -> pd.DataFrame:
    
    teacher_prime = teacher.groupby(by=['teacher_id','subject_id'],as_index=False).aggregate('sum')
    teacher_prime = teacher_prime.groupby(by=['teacher_id'],as_index=False).aggregate('count')[['teacher_id','subject_id']]
    teacher_prime.rename(columns={'subject_id':'cnt'},inplace=True)
    return teacher_prime

